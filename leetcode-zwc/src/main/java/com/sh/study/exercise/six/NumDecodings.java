package com.sh.study.exercise.six;

/**
 * 91. 解码方法
 * 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
 *
 * 'A' -> 1
 * 'B' -> 2
 * ...
 * 'Z' -> 26
 * 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：
 *
 * "AAJF" ，将消息分组为 (1 1 10 6)
 * "KJF" ，将消息分组为 (11 10 6)
 * 注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
 *
 * 给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
 *
 * 题目数据保证答案肯定是一个 32 位 的整数。

 * 示例 1：
 *
 * 输入：s = "12"
 * 输出：2
 * 解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
 * 示例 2：
 *
 * 输入：s = "226"
 * 输出：3
 * 解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
 * 示例 3：
 *
 * 输入：s = "0"
 * 输出：0
 * 解释：没有字符映射到以 0 开头的数字。
 * 含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
 * 由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。
 * 示例 4：
 *
 * 输入：s = "06"
 * 输出：0
 * 解释："06" 不能映射到 "F" ，因为字符串含有前导 0（"6" 和 "06" 在映射中并不等价）。
 *
 * @Author zhouwenchen
 * @Date  2020-09-16
 **/
public class NumDecodings {
    /**
     * 动态规划
     * @param s
     * @return
     */
    public static int numDecodings(String s) {
        int len = s.length();
        if(len == 0){
            return 0;
        }

        /**
         *   // dp[i] 以 s[i - 1] 结尾的前缀子串有多少种解法方法
         *   // dp[i] = dp[i - 1] * 1 if nums[i - 1] != '0'
         *   // dp[i] += dp[i - 2] * 1 if  10 <= int(s[i - 2..i - 1]) <= 26
         */
        int[] dp = new int[len + 1];
        dp[0] = 1;
        char[] charArray = s.toCharArray();
        if(charArray[0] == '0'){
            return 0;
        }
        dp[1] = 1;

        for(int i = 1; i < len;i++){
            if(charArray[i] != '0'){
                dp[i+1] = dp[i];
            }

            int num = 10 * (charArray[i-1] - '0') + (charArray[i] - '0');
            if(num >= 10 && num <=26){
                dp[i+1] += dp[i-1];
            }
        }
        return dp[len];
    }

    /**
     * 求组合，第一个不能是0，且0不能单独成一个数 ，满足条件的总共有多少个
     *
     * @param s
     * @return
     */
    public static int numDecodings2(String s) {
        int n = s.length();
        int[] nums = new int[n + 1];
        nums[0] = 1;
        for (int i = 1; i <= n;++i){
            if(s.charAt(i-1) != '0'){
                nums[i] += nums[i-1];
            }
            if(i > 1 && s.charAt(i-2) != '0' && (s.charAt(i - 2) - '0') * 10 + (s.charAt(i - 1) - '0') <= 26){
                nums[i] += nums[i-2];
            }
        }
        return nums[n];
    }

    /**
     * 空间优化操作
     * @param s
     * @return
     */
    public static int numDecodings1(String s) {
        int n = s.length();
        int a = 0, b = 1, c = 0;
        for (int i = 1; i <= n;++i){
            c = 0;
            if(s.charAt(i-1) != '0'){
                c += b;
            }
            if(i > 1 && s.charAt(i-2) != '0' && (s.charAt(i - 2) - '0') * 10 + (s.charAt(i - 1) - '0') <= 26){
                c+= a;
            }
            a = b;
            b = c;
        }
        return c;
    }

    /**
     *639. 解码方法 II
     * 一条包含字母 A-Z 的消息通过以下的方式进行了编码：
     *
     * 'A' -> 1
     * 'B' -> 2
     * ...
     * 'Z' -> 26
     * 要 解码 一条已编码的消息，所有的数字都必须分组，然后按原来的编码方案反向映射回字母（可能存在多种方式）。例如，"11106" 可以映射为：
     *
     * "AAJF" 对应分组 (1 1 10 6)
     * "KJF" 对应分组 (11 10 6)
     * 注意，像 (1 11 06) 这样的分组是无效的，因为 "06" 不可以映射为 'F' ，因为 "6" 与 "06" 不同。
     *
     * 除了 上面描述的数字字母映射方案，编码消息中可能包含 '*' 字符，可以表示从 '1' 到 '9' 的任一数字（不包括 '0'）。例如，编码字符串 "1*" 可以表示 "11"、"12"、"13"、"14"、"15"、"16"、"17"、"18" 或 "19" 中的任意一条消息。对 "1*" 进行解码，相当于解码该字符串可以表示的任何编码消息。
     *
     * 给你一个字符串 s ，由数字和 '*' 字符组成，返回 解码 该字符串的方法 数目 。
     *
     * 由于答案数目可能非常大，返回对 109 + 7 取余 的结果。
     *
     *
     *
     * 示例 1：
     *
     * 输入：s = "*"
     * 输出：9
     * 解释：这一条编码消息可以表示 "1"、"2"、"3"、"4"、"5"、"6"、"7"、"8" 或 "9" 中的任意一条。
     * 可以分别解码成字符串 "A"、"B"、"C"、"D"、"E"、"F"、"G"、"H" 和 "I" 。
     * 因此，"*" 总共有 9 种解码方法。
     * 示例 2：
     *
     * 输入：s = "1*"
     * 输出：18
     * 解释：这一条编码消息可以表示 "11"、"12"、"13"、"14"、"15"、"16"、"17"、"18" 或 "19" 中的任意一条。
     * 每种消息都可以由 2 种方法解码（例如，"11" 可以解码成 "AA" 或 "K"）。
     * 因此，"1*" 共有 9 * 2 = 18 种解码方法。
     * 示例 3：
     *
     * 输入：s = "2*"
     * 输出：15
     * 解释：这一条编码消息可以表示 "21"、"22"、"23"、"24"、"25"、"26"、"27"、"28" 或 "29" 中的任意一条。
     * "21"、"22"、"23"、"24"、"25" 和 "26" 由 2 种解码方法，但 "27"、"28" 和 "29" 仅有 1 种解码方法。
     * 因此，"2*" 共有 (6 * 2) + (3 * 1) = 12 + 3 = 15 种解码方法。
     *
     *
     * 提示：
     *
     * 1 <= s.length <= 105
     * s[i] 是 0 - 9 中的一位数字或字符 '*'
     *
     * @param s
     * @return
     */
    public static int numDecodings3(String s) {
        
        return 0;
    }

    public static void main(String[] args) {
//        System.out.println(numDecodings("226"));
        System.out.println(numDecodings("12"));
    }
}
